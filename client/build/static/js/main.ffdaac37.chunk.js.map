{"version":3,"sources":["socket.js","component/JoinBlock.jsx","component/Chat.jsx","reducer.js","App.js","index.js"],"names":["socket","io","JoinBlock","onLogin","setListAllRoom","useState","userName","setUserName","isLoading","setLoading","userData","enterChat","a","alert","axios","post","response","data","roomID","getEnterUrlLocation","window","history","replaceState","console","log","url","URL","location","href","searchParams","has","get","className","value","onChange","event","target","type","placeholder","onClick","Chat","users","messages","currentRoomID","onAddMessage","allRoomID","updateUsersAndMessagesList","setCurrentRoom","React","messageText","setMessageText","messagesRef","useRef","useEffect","current","scrollTo","map","index","length","name","ref","message","textMessage","dateMessage","e","rows","emit","dateObject","Date","year","getFullYear","date","getDate","slice","month","getMonth","hours","getHours","minutes","getMinutes","disabled","state","action","isJoined","payload","App","useReducer","reducer","dispatch","setUsersAndMessages","setUsers","addMessage","on","room","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffdaac37.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\n\r\n\r\nconst socket = io()\r\n\r\n\r\nexport default socket\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport axios from \"axios\"\r\n\r\n\r\nconst JoinBlock = ({onLogin, setListAllRoom}) => {\r\n    const [userName, setUserName] = useState('')\r\n    const [isLoading, setLoading] = useState('')\r\n\r\n    const inputUserName = (event) => {\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    let userData = {userName}\r\n\r\n    const enterChat = async () => {\r\n        if (!userName) {\r\n            return alert(\"Please, enter your name!\")\r\n        }\r\n        setLoading(true)\r\n        try {\r\n            const response = await axios.post('/room', userData)\r\n            userData = response.data  // добавляем полученный с сервера roomID\r\n            setListAllRoom(userData.roomID)\r\n            if (getEnterUrlLocation() && (getEnterUrlLocation() !== userData.roomID)) {   // если входим по соронней ссылке\r\n                userData = {\r\n                    userName: userData.userName,        // отображаем в первую очередь комнату в которую перешли по ссылке\r\n                    roomID: getEnterUrlLocation()\r\n                }\r\n                setListAllRoom(userData.roomID)\r\n            }\r\n            window.history.replaceState({},`Chat ${userData.roomID}`,`/room?roomID=${userData.roomID}`)  // Заменяем URL в адресной строке браузера\r\n            onLogin(userData)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    const getEnterUrlLocation = () => {\r\n        const url = new URL(window.location.href)\r\n        if (url.searchParams.has('roomID')) {\r\n            const location = url.searchParams.get('roomID')\r\n            return location\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"join-block\">\r\n            <input\r\n                value={userName}\r\n                onChange={inputUserName}\r\n                type=\"text\" placeholder='Your name'\r\n            />\r\n            <button\r\n                onClick={enterChat}\r\n                className=\"btn btn-success\"\r\n            >\r\n                {isLoading ? 'Starting': 'Start chat'}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default JoinBlock","import React from 'react'\r\nimport socket from '../socket'\r\n\r\n\r\nfunction Chat({users, messages, userName, currentRoomID, onAddMessage,\r\n              allRoomID, updateUsersAndMessagesList, setCurrentRoom}) {\r\n\r\n    const [messageText, setMessageText] = React.useState('')\r\n    const messagesRef = React.useRef(null)\r\n\r\n    const onSendMessage = () => {\r\n        socket.emit('ROOM:NEW_MESSAGE_FROM_USER', {\r\n            roomID: currentRoomID,\r\n            userName,\r\n            textMessage: messageText\r\n        })\r\n\r\n        let dateObject = new Date()\r\n        let year = dateObject.getFullYear()\r\n        let date = (\"0\" + dateObject.getDate()).slice(-2)\r\n        let month = (\"0\" + (dateObject.getMonth() + 1)).slice(-2)\r\n        let hours = (\"0\" + dateObject.getHours()).slice(-2)\r\n        let minutes = (\"0\" + dateObject.getMinutes()).slice(-2)\r\n        let dateMessage = hours + \":\" + minutes + \"  \" + date + \".\" + month + \".\" + year\r\n\r\n        onAddMessage({userName, 'textMessage': messageText, dateMessage})   //  доавляем свою дату\r\n        setMessageText('')\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        messagesRef.current.scrollTo(0, 99999)\r\n    }, [messages])\r\n\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat-users\">\r\n                <b>Rooms:</b>\r\n                <ul>\r\n                    {allRoomID.map((roomID, index) =>\r\n                    <li key={roomID + index}\r\n                        onClick={() => {\r\n                        setCurrentRoom(roomID)\r\n                        updateUsersAndMessagesList({roomID, userName})\r\n                        window.history.replaceState({},`Chat ${roomID}`,`/room?roomID=${roomID}`)  // Заменяем URL в адресной строке браузера\r\n                        }}>\r\n                        {(roomID === currentRoomID) ? <b>{roomID}</b> : roomID}\r\n                    </li>)}\r\n                </ul>\r\n                <hr />\r\n                <b>Online ({users.length}):</b>\r\n                <ul>\r\n                    {users.map((name, index) => (\r\n                        <li key={name + index}>\r\n                            {(name === userName) ? <b>{name}</b> : name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n                <div ref={messagesRef} className=\"messages\">\r\n                    {messages.map((message, index) => (\r\n                        message.userName === userName ?\r\n                        <div key={\"qw\" + index} className=\"myMessage\">\r\n                            <p>{message.textMessage}</p>\r\n                            <div>\r\n                                <span>\r\n                                    {`${message.userName} ${message.dateMessage}`}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                            :\r\n                        <div key={\"er\" + index} className=\"message\">\r\n                            <p>{message.textMessage}</p>\r\n                            <div>\r\n                                <span>\r\n                                    {`${message.userName} ${message.dateMessage}`}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <form>\r\n          <textarea value={messageText}\r\n                    onChange={e => setMessageText(e.target.value)}\r\n                    className=\"form-control\"\r\n                    rows=\"3\">\r\n          </textarea>\r\n                    {(messageText.length !== 0) ?\r\n                    <button onClick={onSendMessage}\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\">\r\n                        Send message\r\n                    </button>\r\n                    :\r\n                    <button disabled={true}\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\">\r\n                        Send message\r\n                    </button>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chat","export default (state, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'JOINED':\r\n            return {\r\n                ...state,\r\n                isJoined: true,\r\n                userName: action.payload.userName,\r\n                currentRoomID: action.payload.roomID\r\n            }\r\n\r\n        case 'SET_DATA':\r\n            return {\r\n                ...state,\r\n                users: action.payload.users,\r\n                messages: action.payload.messages\r\n            }\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            }\r\n\r\n        case 'SET_CURRENT_RoomID':\r\n            return {\r\n                ...state,\r\n                currentRoomID: action.payload\r\n            }\r\n\r\n        case 'SET_ROOMS_LIST':\r\n            return {\r\n                ...state,\r\n                allRoomID: [...state.allRoomID, action.payload]\r\n            }\r\n\r\n        case 'NEW_MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import './index.css'\nimport socket from \"./socket\"\nimport JoinBlock from \"./component/JoinBlock\"\nimport Chat from './component/Chat'\nimport {useReducer, useEffect} from 'react'\nimport reducer from \"./reducer\"\nimport axios from \"axios\"\n\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, {\n        isJoined: false,\n        userName: null,\n        users: [],\n        messages: [],\n        currentRoomID: null,\n        allRoomID: []\n    })\n\n\n    const onLogin = async (userData) => {\n        dispatch({\n            type: 'JOINED',\n            payload: userData\n        })\n        await setUsersAndMessages(userData)\n    }\n\n\n     const setUsersAndMessages = async (userData) => {\n        try {\n            socket.emit('ROOM:JOIN', userData)    // оправка сообщения через сокет (RoomID должен быть в userData) / добавление socketID на сервере\n        } catch (e) {\n            console.log(e)\n            console.log(\"проблема с отправкой сообщения на сервер\")\n        }\n        try {\n            const {data} = await axios.get(`/get/room?id_room=${userData.roomID}`)  // запрашиваем данные по пользоватаелям и сообщениям в выбранной комнате\n            // data = {users: [], messages: []}\n            dispatch({\n                type: 'SET_DATA',\n                payload: data\n            })\n        } catch (e) {\n            console.log(e)\n            console.log(\"проблема при получении информации по конкретной комнате (для отображения у себя)\")\n        }\n    }\n\n\n    const setCurrentRoomID = (currentRoomID) => {\n        dispatch({\n            type: 'SET_CURRENT_RoomID',\n            payload: currentRoomID\n        })\n    }\n\n\n    const setAllRoomIdList = (room) => {\n        dispatch({\n            type: 'SET_ROOMS_LIST',\n            payload: room\n        })\n    }\n\n\n    const setUsers = (users) => {\n        dispatch({\n            type: 'SET_USERS',\n            payload: users\n        })\n    }\n\n\n    const addMessage = (message) => {\n        dispatch({\n            type: 'NEW_MESSAGE', // message = {userName: userName, textMessages: some_text, dateText:}\n            payload: message\n        })\n    }\n\n\n    useEffect(() => {\n        socket.on('ROOM:SET_USERS', setUsers)\n        socket.on('ROOM:NEW_MESSAGE_FROM_SERVER', addMessage)\n    }, [])\n\n\n     return (\n        <div className=\"wrapper\">\n            {(!state.isJoined) ?\n            <JoinBlock onLogin={onLogin} setListAllRoom={setAllRoomIdList}/>\n            :\n            <Chat\n                {...state}\n                onAddMessage={addMessage}\n                updateUsersAndMessagesList={setUsersAndMessages}\n                setCurrentRoom={setCurrentRoomID}\n            />}\n        </div>\n    )\n}\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}